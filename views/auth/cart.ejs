<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Your Cart</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/style.css"> <!-- Link to your custom CSS file if applicable -->
</head>
<body>

    <div class="container my-5">
        <h1 class="text-center mb-4">Your Cart</h1>

        <div class="table-responsive">
            <table class="table table-bordered">
                <thead class="table-dark">
                    <tr>
                        <th>Item</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Total</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="cart-items">
                    <!-- Cart items will be dynamically inserted here -->
                </tbody>
            </table>
        </div>

        <h4 class="text-end mt-4">Grand Total: $<span id="grand-total">0.00</span></h4>

        <div class="d-flex justify-content-between mt-4">
            <a href="/auth/dashboard/menu" class="btn btn-primary">Back to Menu</a>
            <a href="/auth/checkout" class="btn btn-success">Proceed to Checkout</a>
        </div>
    </div>

    <script>
        // Function to display cart items from session storage
        function displayCartItems() {
            const cart = JSON.parse(sessionStorage.getItem('cart')) || [];
            const cartItemsContainer = document.getElementById('cart-items');
            const grandTotalContainer = document.getElementById('grand-total');
            cartItemsContainer.innerHTML = ''; // Clear existing items

            let grandTotal = 0;

            cart.forEach((item, index) => {
                const itemTotal = (item.itemPrice * item.quantity).toFixed(2);
                grandTotal += parseFloat(itemTotal);

                const row = document.createElement('tr');
                row.innerHTML = `
                    <td><strong>${item.itemName}</strong></td>
                    <td>$${item.itemPrice.toFixed(2)}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-secondary decrease-qty" data-index="${index}">-</button>
                        <span class="mx-2">${item.quantity}</span>
                        <button class="btn btn-sm btn-outline-secondary increase-qty" data-index="${index}">+</button>
                    </td>
                    <td>$${itemTotal}</td>
                    <td>
                        <button class="btn btn-sm btn-danger remove-item" data-index="${index}">Remove</button>
                    </td>
                `;
                cartItemsContainer.appendChild(row);
            });

            grandTotalContainer.textContent = grandTotal.toFixed(2);

            // Add event listeners for "Increase", "Decrease", and "Remove" buttons
            addCartEditFunctionality();
        }

        // Function to handle editing the cart
        function addCartEditFunctionality() {
            const cart = JSON.parse(sessionStorage.getItem('cart')) || [];

            // Increase quantity
            document.querySelectorAll('.increase-qty').forEach(button => {
                button.addEventListener('click', function () {
                    const index = this.getAttribute('data-index');
                    cart[index].quantity += 1;
                    sessionStorage.setItem('cart', JSON.stringify(cart));
                    displayCartItems();
                });
            });

            // Decrease quantity
            document.querySelectorAll('.decrease-qty').forEach(button => {
                button.addEventListener('click', function () {
                    const index = this.getAttribute('data-index');
                    if (cart[index].quantity > 1) {
                        cart[index].quantity -= 1;
                    } else {
                        alert("Quantity can't be less than 1");
                    }
                    sessionStorage.setItem('cart', JSON.stringify(cart));
                    displayCartItems();
                });
            });

            // Remove item
            document.querySelectorAll('.remove-item').forEach(button => {
                button.addEventListener('click', function () {
                    const index = this.getAttribute('data-index');
                    cart.splice(index, 1); // Remove item from cart
                    sessionStorage.setItem('cart', JSON.stringify(cart));
                    displayCartItems();
                });
            });
        }

        // Display cart items on page load
        window.onload = displayCartItems;
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
